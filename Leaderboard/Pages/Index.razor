@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using RockPaperOrleans.Abstractions
@inject NavigationManager _navigationManager

<PageTitle>#RPO dashboard</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Rock, Paper, Orleans</MudText>
<MudText Class="mb-8">Welcome to the leaderboard. Here you can keep up with all the players, their histories, and recent games.</MudText>

@if (_game != null)
{
    <MudStack>
        @if (_game != null && _turn != null)
        {
            <MudText Typo="Typo.h2">Round @(_game.Turns.Count) of @_game.Rounds</MudText>
        }
        <MudStack Row="true">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@_player1.Name</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h4">@(_turn != null && _turn.Throws.Any() ? _turn.Throws[0].Play : "...")</MudText>
                        <MudText>@_player1.WinCount wins, @_player1.LossCount losses</MudText>
                    </MudCardContent>
                </MudCard>
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@_player2.Name</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.h4">@(_turn != null && _turn.Throws.Any() ? _turn.Throws[1].Play : "...")</MudText>
                        <MudText>@_player2.WinCount wins, @_player2.LossCount losses</MudText>
                    </MudCardContent>
                </MudCard>
            </MudStack>
    </MudStack>
}

@code
{
    Game _game;
    Turn _turn;
    Player _player1;
    Player _player2;

    protected override async Task OnInitializedAsync()
    {
        var hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/hubs/leaderboard")).Build();

        hubConnection.On<Game, Player, Player>("OnGameStarted", (game, player1, player2) =>
        {
            _game = game;
            _player1 = player1;
            _player2 = player2;
            StateHasChanged();
        });

        hubConnection.On<Turn, Game>("OnTurnStarted", (turn, game) =>
        {
            _turn = turn;
            _game = game;

            StateHasChanged();
        });

        hubConnection.On<Turn, Game>("OnTurnCompleted", (turn, game) =>
        {
            _turn = turn;
            _game = game;

            StateHasChanged();
        });

        hubConnection.On<Game>("OnGameCompleted", (game) =>
        {
            _game = game;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }
}