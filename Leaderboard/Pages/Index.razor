@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using RockPaperOrleans.Abstractions
@inject NavigationManager _navigationManager

<PageTitle>#RPO dashboard</PageTitle>

@if (_game != null)
{
    <MudGrid>
        <MudItem xs="8">
            <MudGrid>
                @if (_game != null && _turn != null)
                {
                    <MudItem xs="12">
                        <MudPaper Class="mud-theme-primary d-flex align-center justify-center mud-width-full py-8">
                            <MudText Typo="Typo.h3">Round @(_game.Turns.Count) of @_game.Rounds</MudText>
                        </MudPaper>
                    </MudItem>
                }

                <MudItem xs="6">
                    <MudPaper Class="mud-theme-info d-flex align-center justify-center mud-width-full py-8">
                        <MudStack Class="align-center">
                            <MudText Typo="Typo.h3">@_player1?.Name</MudText>
                            <MudText Class="">@_player1?.WinCount wins, @_player1?.LossCount losses</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <MudItem xs="6">
                    <MudPaper Class="mud-theme-info d-flex align-center justify-center mud-width-full py-8">
                        <MudStack Class="align-center">
                            <MudText Typo="Typo.h3">@_player2?.Name</MudText>
                            <MudText>@_player2?.WinCount wins, @_player2?.LossCount losses</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <MudItem xs="6">
                    <MudPaper Class="--mud-palette-success-text d-flex align-center justify-center mud-width-full py-2">
                        @if (_turn == null || !_turn.Throws.Any())
                        {
                            <MudProgressCircular Color="Color.Primary" Style="height:280px;width:280px;" Indeterminate="true" Class="object-center" />
                        }
                        @if (!(_turn == null || !_turn.Throws.Any()))
                        {
                            @if (_turn.Winner != _player1?.Name && _turn.Winner != _player2?.Name)
                            {
                                <MudImage Style="height:280px;width:280px;" Src="@($"{_turn.Throws[0].Play.ToString()}.png")" Fluid="true" ObjectFit="ObjectFit.ScaleDown" Class="object-center" />
                            }
                            @if (_turn.Winner == _player1?.Name)
                            {
                                <MudImage Style="height:280px;width:280px;" Src="@($"{_turn.Throws[0].Play.ToString()}-win.png")" Fluid="true" ObjectFit="ObjectFit.ScaleDown" Class="object-center" />
                            }
                            @if (_turn.Winner == _player2?.Name)
                            {
                                <MudImage Style="height:280px;width:280px;" Src="@($"{_turn.Throws[0].Play.ToString()}-lose.png")" Fluid="true" ObjectFit="ObjectFit.ScaleDown" Class="object-center" />
                            }
                        }
                    </MudPaper>
                </MudItem>

                <MudItem xs="6">
                    <MudPaper Class="--mud-palette-success-text d-flex align-center justify-center mud-width-full py-2">
                        @if (_turn == null || !_turn.Throws.Any())
                        {
                            <MudProgressCircular Color="Color.Primary" Style="height:280px;width:280px;" Indeterminate="true" Class="object-center" />
                        }
                        @if (!(_turn == null || !_turn.Throws.Any()))
                        {
                            @if (_turn.Winner != _player1?.Name && _turn.Winner != _player2?.Name)
                            {
                                <MudImage Style="height:280px;width:280px;" Src="@($"{_turn.Throws[1].Play.ToString()}.png")" Fluid="true" ObjectFit="ObjectFit.ScaleDown" Class="object-center" />
                            }
                            @if (_turn.Winner == _player2?.Name)
                            {
                                <MudImage Style="height:280px;width:280px;" Src="@($"{_turn.Throws[1].Play.ToString()}-win.png")" Fluid="true" ObjectFit="ObjectFit.ScaleDown" Class="object-center" />
                            }
                            @if (_turn.Winner == _player1?.Name)
                            {
                                <MudImage Style="height:280px;width:280px;" Src="@($"{_turn.Throws[1].Play.ToString()}-lose.png")" Fluid="true" ObjectFit="ObjectFit.ScaleDown" Class="object-center" />
                            }
                        }
                    </MudPaper>
                </MudItem>

                @for (int i = 0; i < _game?.Rounds; i++)
                {
                    var index = i + 1;
                    var player1Theme = "mud-theme-info";
                    var player2Theme = "mud-theme-info";
                    var player1Label = $"Round {index}";
                    var player2Label = $"Round {index}";

                    if (_game.Turns.Count >= index)
                    {
                        if (string.IsNullOrEmpty(_game.Turns[i].Winner))
                        {
                            player2Theme = "mud-theme-info";
                            player1Theme = "mud-theme-info";
                            player2Label = "Scoring...";
                            player1Label = "Scoring...";
                        }
                        if (_game.Turns[i].Winner == _player1?.Name)
                        {
                            player1Theme = "mud-theme-success";
                            player2Theme = "mud-theme-error";
                            player1Label = "Winner";
                            player2Label = "Loser";
                        }
                        if (_game.Turns[i].Winner == _player2?.Name)
                        {
                            player2Theme = "mud-theme-success";
                            player1Theme = "mud-theme-error";
                            player2Label = "Winner";
                            player1Label = "Loser";
                        }
                        if (_game.Turns[i].Winner != _player1?.Name &&
                        _game.Turns[i].Winner != _player2?.Name &&
                        !string.IsNullOrEmpty(_game.Turns[i].Winner))
                        {
                            player2Theme = "mud-theme-info";
                            player1Theme = "mud-theme-info";
                            player2Label = _game.Turns[i].Winner;
                            player1Label = _game.Turns[i].Winner;
                        }
                    }

                    <MudItem xs="6">
                        <MudPaper Class="@($"{player1Theme} d-flex align-center justify-center mud-width-full py-1")">
                            <MudText Typo="Typo.h3">@player1Label</MudText>
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="6">
                        <MudPaper Class="@($"{player2Theme} d-flex align-center justify-center mud-width-full py-1")">
                            <MudText Typo="Typo.h3">@player2Label</MudText>
                        </MudPaper>
                    </MudItem>
                }

            </MudGrid>
        </MudItem>

        <MudItem xs="4">
            <MudPaper Class="mud-theme-primary d-flex align-center justify-center mud-width-full py-1 mb-2">
                <MudText Typo="Typo.h4">Leaderboard</MudText>
            </MudPaper>

            @foreach (var player in _playersOnline)
            {
                <MudPaper Class="d-flex flex-grow-1 pa-1 mb-2">
                    <MudPaper Class="flex-grow-1 pl-2" Elevation="0">
                        <MudText Typo="Typo.subtitle1">@player.Name</MudText>
                    </MudPaper>
                    <MudChip Text="@($"{player.WinCount} Wins")" Variant="Variant.Text" Color="Color.Success" SelectedColor="Color.Primary"></MudChip>
                    <MudChip Text="@($"{player.LossCount} Losses")" Variant="Variant.Text" Color="Color.Error" SelectedColor="Color.Primary"></MudChip>
                </MudPaper>
            }

        </MudItem>

    </MudGrid>


}
@code
{
    Game? _game;
    Turn? _turn;
    Player? _player1;
    Player? _player2;
    List<Player> _playersInLobby = new();
    List<Player> _playersOnline = new();

    protected override async Task OnInitializedAsync()
    {
        var hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/hubs/leaderboard")).Build();

        hubConnection.On<Game, Player, Player>("OnGameStarted", (game, player1, player2) =>
        {
            _game = game;
            _player1 = player1;
            _player2 = player2;
            StateHasChanged();
        });

        /*
         * turned these off to minimize flicker in the UI

        hubConnection.On<Turn, Game>("OnTurnStarted", (turn, game) =>
        {
            _turn = turn;
            _game = game;

            StateHasChanged();
        });

        hubConnection.On<Turn, Game>("OnTurnCompleted", (turn, game) =>
        {
            _turn = turn;
            _game = game;

            StateHasChanged();
        });
         */

        hubConnection.On<Turn, Game>("OnTurnScored", (turn, game) =>
        {
            _turn = turn;
            _game = game;

            StateHasChanged();
        });

        hubConnection.On<Game>("OnGameCompleted", (game) =>
        {
            _game = game;
            StateHasChanged();
        });

        hubConnection.On<Player>("OnPlayerScoresUpdated", (player) =>
        {
            if(_playersOnline.Any(x => x == player))
            {
                _playersOnline.RemoveAll(x => x == player);
                _playersOnline.Add(player);
            }
            _playersOnline = _playersOnline.OrderByDescending(x => x.WinCount).ToList();
            StateHasChanged();
        });

        hubConnection.On<List<Player>>("OnLobbyUpdated", (playersInLobby) =>
        {
            _playersInLobby = playersInLobby;
            StateHasChanged();
        });

        hubConnection.On<List<Player>>("OnPlayersOnlineUpdated", (playersOnline) =>
        {
            _playersOnline = playersOnline.OrderByDescending(x => x.WinCount).ToList();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }
}