@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using RockPaperOrleans.Abstractions
@inject NavigationManager _navigationManager

<PageTitle>#RPO dashboard</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Rock, Paper, Orleans</MudText>
<MudText Class="mb-8">Welcome to the leaderboard. Here you can keep up with all the players, their histories, and recent games.</MudText>

@if (_game != null)
{
    <MudStack>
        @if (_game != null && _turn != null)
        {
            <MudText Typo="Typo.h3">Round @(_game.Turns.Count) of @_game.Rounds</MudText>
        }
        <MudStack Row="true">
            <MudCard style="width: 300px; height: 400px; padding: 10px;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudStack Row="true">
                            <MudStack>
                                <MudText Typo="Typo.h6">@_player1.Name</MudText>
                                <MudText>@_player1.WinCount wins, @_player1.LossCount losses</MudText>
                            </MudStack>
                            @if (_turn == null || !_turn.Throws.Any())
                            {
                                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                            }
                        </MudStack>
                    </CardHeaderContent>
                </MudCardHeader>
                @if(!(_turn == null || !_turn.Throws.Any()))
                {
                    if (_turn.Winner != _player1?.Name && _turn.Winner != _player2?.Name)
                    {
                        <MudCardMedia Height="280" Image="@($"{_turn.Throws[0].Play.ToString()}.png")" />
                    }
                    else if (_turn.Winner == _player1?.Name)
                    {
                        <MudCardMedia Height="280" Image="@($"{_turn.Throws[0].Play.ToString()}-win.png")" />
                    }
                    else
                    {
                        <MudCardMedia Height="280" Image="@($"{_turn.Throws[0].Play.ToString()}-lose.png")" />
                    }
                }
            </MudCard>
            <MudCard style="width: 300px; height: 400px; padding: 10px;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudStack Row="true">
                            <MudStack>
                                <MudText Typo="Typo.h6">@_player2.Name</MudText>
                                <MudText>@_player2.WinCount wins, @_player2.LossCount losses</MudText>
                            </MudStack>
                            @if (_turn == null || !_turn.Throws.Any())
                            {
                                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                            }
                        </MudStack>
                    </CardHeaderContent>
                </MudCardHeader>
                @if (!(_turn == null || !_turn.Throws.Any()))
                {
                    if (_turn.Winner != _player2?.Name && _turn.Winner != _player1?.Name)
                    {
                        <MudCardMedia Height="280" Image="@($"{_turn.Throws[1].Play.ToString()}.png")" />
                    }
                    else if (_turn.Winner == _player2?.Name)
                    {
                        <MudCardMedia Height="280" Image="@($"{_turn.Throws[1].Play.ToString()}-win.png")" />
                    }
                    else
                    {
                        <MudCardMedia Height="280" Image="@($"{_turn.Throws[1].Play.ToString()}-lose.png")" />
                    }
                }
            </MudCard>
        </MudStack>
    </MudStack>
}
@code
{
    Game _game;
    Turn _turn;
    Player _player1;
    Player _player2;

    protected override async Task OnInitializedAsync()
    {
        var hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/hubs/leaderboard")).Build();

        hubConnection.On<Game, Player, Player>("OnGameStarted", (game, player1, player2) =>
        {
            _game = game;
            _player1 = player1;
            _player2 = player2;
            StateHasChanged();
        });

        hubConnection.On<Turn, Game>("OnTurnStarted", (turn, game) =>
        {
            _turn = turn;
            _game = game;

            StateHasChanged();
        });

        hubConnection.On<Turn, Game>("OnTurnCompleted", (turn, game) =>
        {
            _turn = turn;
            _game = game;

            StateHasChanged();
        });

        hubConnection.On<Turn, Game>("OnTurnScored", (turn, game) =>
        {
            _turn = turn;
            _game = game;

            StateHasChanged();
        });

        hubConnection.On<Game>("OnGameCompleted", (game) =>
        {
            _game = game;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }
}