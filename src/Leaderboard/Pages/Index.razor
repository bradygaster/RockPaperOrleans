@page "/"
@using Leaderboard.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@using RockPaperOrleans.Abstractions
@inject NavigationManager _navigationManager

<PageTitle>#RPO dashboard</PageTitle>

@if (_game != null)
{
    <MudGrid>
        <MudItem xs="8">
            <MudGrid>
                @if (_game != null && _turn != null)
                {
                    <MudItem xs="12">
                        <MudPaper Class="mud-theme-primary d-flex align-center justify-center mud-width-full py-2">
                            <MudText Typo="Typo.h3" Class="banger">Round @(_game.Turns.Count) of @_game.Rounds</MudText>
                        </MudPaper>
                    </MudItem>
                }

                <MudItem xs="6">
                    <MudPaper Class="@($"{_player1Theme} d-flex align-center justify-center mud-width-full py-1")">
                        <MudStack Class="align-center">
                            <MudText Typo="Typo.h4" Class="luckyGuy">@_player1?.Name</MudText>
                            <MudStack Row="true">
                                <MudChip Class="banger" Icon="@Icons.Material.Filled.ThumbUp" Text="@($"{_player1?.WinCount} Wins")" Style="font-size: 2em;" Variant="Variant.Filled" Color="Color.Success"></MudChip>
                                <MudChip Class="banger" Icon="@Icons.Material.Filled.ThumbDown" Text="@($"{_player1?.LossCount} Losses")" Style="font-size: 2em;" Variant="Variant.Filled" Color="Color.Error"></MudChip>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <MudItem xs="6">
                    <MudPaper Class="@($"{_player2Theme} d-flex align-center justify-center mud-width-full py-1")">
                        <MudStack Class="align-center">
                            <MudText Typo="Typo.h4" Class="luckyGuy">@_player2?.Name</MudText>
                            <MudStack Row="true">
                                <MudChip Class="banger" Icon="@Icons.Material.Filled.ThumbUp" Text="@($"{_player2?.WinCount} Wins")" Style="font-size: 2em;" Variant="Variant.Filled" Color="Color.Success"></MudChip>
                                <MudChip Class="banger" Icon="@Icons.Material.Filled.ThumbDown" Text="@($"{_player2?.LossCount} Losses")" Style="font-size: 2em;" Variant="Variant.Filled" Color="Color.Error"></MudChip>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <MudItem xs="6">
                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-2" Outlined="true">
                        @if (_turn == null || !_turn.Throws.Any())
                        {
                            <MudProgressCircular Color="Color.Primary" Style="height:280px;width:280px;" Indeterminate="true" Class="object-center" />
                        }
                        @if (!(_turn == null || !_turn.Throws.Any()))
                        {
                            @if (_turn.Winner != _player1?.Name && _turn.Winner != _player2?.Name)
                            {
                                <MudImage Style="height:280px;width:280px;" Src="@($"{_turn.Throws[0].Play.ToString().ToLower()}.png")" Fluid="true" ObjectFit="ObjectFit.ScaleDown" Class="object-center" />
                            }
                            @if (_turn.Winner == _player1?.Name)
                            {
                                <MudImage Style="height:280px;width:280px;" Src="@($"{_turn.Throws[0].Play.ToString().ToLower()}-win.png")" Fluid="true" ObjectFit="ObjectFit.ScaleDown" Class="object-center" />
                            }
                            @if (_turn.Winner == _player2?.Name)
                            {
                                <MudImage Style="height:280px;width:280px;" Src="@($"{_turn.Throws[0].Play.ToString().ToLower()}-lose.png")" Fluid="true" ObjectFit="ObjectFit.ScaleDown" Class="object-center" />
                            }
                        }
                    </MudPaper>
                </MudItem>

                <MudItem xs="6">
                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-2" Outlined="true">
                        @if (_turn == null || !_turn.Throws.Any())
                        {
                            <MudProgressCircular Color="Color.Primary" Style="height:280px;width:280px;" Indeterminate="true" Class="object-center" />
                        }
                        @if (!(_turn == null || !_turn.Throws.Any()))
                        {
                            @if (_turn.Winner != _player1?.Name && _turn.Winner != _player2?.Name)
                            {
                                <MudImage Style="height:280px;width:280px;" Src="@($"{_turn.Throws[1].Play.ToString().ToLower()}.png")" Fluid="true" ObjectFit="ObjectFit.ScaleDown" Class="object-center" />
                            }
                            @if (_turn.Winner == _player2?.Name)
                            {
                                <MudImage Style="height:280px;width:280px;" Src="@($"{_turn.Throws[1].Play.ToString().ToLower()}-win.png")" Fluid="true" ObjectFit="ObjectFit.ScaleDown" Class="object-center" />
                            }
                            @if (_turn.Winner == _player1?.Name)
                            {
                                <MudImage Style="height:280px;width:280px;" Src="@($"{_turn.Throws[1].Play.ToString().ToLower()}-lose.png")" Fluid="true" ObjectFit="ObjectFit.ScaleDown" Class="object-center" />
                            }
                        }
                    </MudPaper>
                </MudItem>

                @for (int i = 0; i < _game?.Rounds; i++)
                {
                    var index = i + 1;
                    var player1Theme = "mud-theme-info";
                    var player2Theme = "mud-theme-info";
                    var player1Label = $"Round {index}";
                    var player2Label = $"Round {index}";

                    if (_game.Turns.Count >= index)
                    {
                        if (string.IsNullOrEmpty(_game.Turns[i].Winner))
                        {
                            player2Theme = "mud-theme-info";
                            player1Theme = "mud-theme-info";
                            player2Label = "Scoring...";
                            player1Label = "Scoring...";
                        }
                        if (_game.Turns[i].Winner == _player1?.Name)
                        {
                            player1Theme = "mud-theme-success";
                            player2Theme = "mud-theme-error";
                            player1Label = "Winner";
                            player2Label = "Loser";
                        }
                        if (_game.Turns[i].Winner == _player2?.Name)
                        {
                            player2Theme = "mud-theme-success";
                            player1Theme = "mud-theme-error";
                            player2Label = "Winner";
                            player1Label = "Loser";
                        }
                        if (_game.Turns[i].Winner != _player1?.Name &&
                        _game.Turns[i].Winner != _player2?.Name &&
                        !string.IsNullOrEmpty(_game.Turns[i].Winner))
                        {
                            player2Theme = "mud-theme-dark";
                            player1Theme = "mud-theme-dark";
                            player2Label = _game.Turns[i].Winner;
                            player1Label = _game.Turns[i].Winner;
                        }
                    }

                    <MudItem xs="6">
                        <MudPaper Class="@($"{player1Theme} d-flex align-center justify-center mud-width-full py-1")">
                            <MudText Typo="Typo.h4" Class="banger">@player1Label</MudText>
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="6">
                        <MudPaper Class="@($"{player2Theme} d-flex align-center justify-center mud-width-full py-1")">
                            <MudText Typo="Typo.h4" Class="banger">@player2Label</MudText>
                        </MudPaper>
                    </MudItem>
                }

            </MudGrid>
        </MudItem>

        <MudItem xs="4">
            <MudPaper Class="mud-theme-primary d-flex align-center justify-center mud-width-full py-2 mb-2">
                <MudText Typo="Typo.h4" Class="banger">Leaderboard</MudText>
            </MudPaper>

            @foreach (var player in _playersOnline)
            {
                <MudPaper Class="d-flex flex-grow-1 pa-1 mb-2" Elevation="0">
                    <MudChip Text="@($"{player.PercentWon}%")" Class="luckyGuy" Style="font-size: 2em;" Variant="Variant.Filled" Color="Color.Info" SelectedColor="Color.Primary"></MudChip>
                    <MudPaper Class="flex-grow-1 pl-2" Elevation="0">
                        <MudText Typo="Typo.h5" Class="luckyGuy">@player.Name</MudText>
                    </MudPaper>
                </MudPaper>
            }

            <MudPaper Class="mud-theme-primary d-flex align-center justify-center mud-width-full py-2 mt-5 mb-2">
                <MudText Typo="Typo.h4" Class="banger">Grain Count : @_latestUpdate?.GrainsActive.ToString("N0")</MudText>
            </MudPaper>

            <MudPaper Elevation="0">
                <MudCard Elevation="1">
                    <MudCardContent>
                        <MudChart ChartType="ChartType.Line"
                              Class="my-0 pa-0"
                              ChartSeries="@Series"
                              Width="100%"
                              Height="100%"
                              ChartOptions="@_options"></MudChart>
                    </MudCardContent>
                </MudCard>
            </MudPaper>

            <MudPaper Class="mud-theme-primary d-flex align-center justify-center mud-width-full py-2 mt-5 mb-2">
                <MudText Typo="Typo.h4" Class="banger">Server Statistics</MudText>
            </MudPaper>

            @if (_latestUpdate != null)
            {
                <MudPaper Class="d-flex flex-grow-1 pa-1 mb-2" Elevation="0">
                    <MudPaper Class="flex-grow-1 pl-2" Elevation="0">
                        <MudText Typo="Typo.h5" Class="d-block pathway">Started</MudText>
                    </MudPaper>
                    <MudChip Text="@($"{@_latestUpdate.DateStarted}")" Class="luckyGuy" Style="font-size: 1.5em;" Variant="Variant.Filled" Color="Color.Info"></MudChip>
                </MudPaper>

                <MudPaper Class="d-flex flex-grow-1 pa-1 mb-2" Elevation="0">
                    <MudPaper Class="flex-grow-1 pl-2" Elevation="0">
                        <MudText Typo="Typo.h5" Class="d-block pathway">Uptime</MudText>
                    </MudPaper>
                    <MudChip Text="@_latestUpdate.TimeUp.ToString("hh\\:mm\\:ss")" Class="luckyGuy" Style="font-size: 1.5em;" Variant="Variant.Filled" Color="Color.Info"></MudChip>
                </MudPaper>

                <MudPaper Class="d-flex flex-grow-1 pa-1 mb-2" Elevation="0">
                    <MudPaper Class="flex-grow-1 pl-2" Elevation="0">
                        <MudText Typo="Typo.h5" Class="d-block pathway">Games completed</MudText>
                    </MudPaper>
                    <MudChip Text="@_latestUpdate.GamesCompleted.ToString("N0")" Class="luckyGuy" Style="font-size: 1.5em;" Variant="Variant.Filled" Color="Color.Info"></MudChip>
                </MudPaper>
            }
        </MudItem>

    </MudGrid>
}

@code
{
    Game? _game;
    Turn? _turn;
    Player? _player1;
    Player? _player2;
    List<Player> _playersOnline = new();
    string _player1Theme = "mud-theme-info";
    string _player2Theme = "mud-theme-info";
    string _signalrUrl = string.Empty;
    public List<ChartSeries> Series = new List<ChartSeries>();
    private List<double> _data = new();
    SystemStatusUpdate? _latestUpdate;

    private ChartOptions _options = new()
        {
            DisableLegend = true,
            InterpolationOption = InterpolationOption.NaturalSpline,
            LineStrokeWidth = 8
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _signalrUrl = _navigationManager.ToAbsoluteUri("/hubs/leaderboard").AbsoluteUri;

            var hubConnection = new HubConnectionBuilder()
                                        .WithAutomaticReconnect()
                                        .WithUrl(_signalrUrl)
                                            .Build();

            for (int i = 0; i < 100; i++) _data.Add(0);

            Series = new List<ChartSeries>()
            {
                new ChartSeries() { Name = "Grain Count", Data = _data.ToArray() }
            };

            hubConnection.On<Game, Player, Player>("OnGameStarted", (game, player1, player2) =>
            {
                _player1Theme = "mud-theme-info";
                _player2Theme = "mud-theme-info";
                _game = game;
                _player1 = player1;
                _player2 = player2;
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<Turn, Game>("OnTurnScored", (turn, game) =>
            {
                _turn = turn;
                _game = game;
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<Game>("OnGameCompleted", (game) =>
            {
                _game = game;

                if (_game?.Winner == _player1?.Name)
                {
                    _player1Theme = "mud-theme-success";
                    _player2Theme = "mud-theme-error";
                }

                if (_game?.Winner == _player2?.Name)
                {
                    _player2Theme = "mud-theme-success";
                    _player1Theme = "mud-theme-error";
                }

                if (_game?.Winner != _player2?.Name && _game.Winner != _player1?.Name)
                {
                    _player2Theme = "mud-theme-dark";
                    _player1Theme = "mud-theme-dark";
                }
                
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<List<Player>>("OnPlayersOnlineUpdated", (playersOnline) =>
            {
                _playersOnline = playersOnline;
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<SystemStatusUpdate>("OnSystemStatusUpdated", (update) =>
            {
                _latestUpdate = update;
                _data.RemoveAt(0);
                _data.Add(update.GrainsActive);

                Series = new List<ChartSeries>() {
                    new() { Name = "Grain Count", Data = _data.ToArray() }
                };

                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}